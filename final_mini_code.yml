AWSTemplateFormatVersion: '2010-09-09'
Description: AWS infrastructure for a secure mini network.

Parameters:
  MyIP:
    Description: The IP address range that can be used to SSH to the EC2 instances.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: '0.0.0.0/32'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.


Resources:   
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      Tags:
        - Key: Name
          Value: My-VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: "ap-south-1a"
      MapPublicIpOnLaunch: true

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: "ap-south-1b"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref MyInternetGateway

  AssociatePublicSubnetRouteTable1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  NatGatewayEIP:
    Type: AWS::EC2::EIP

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
    
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable


  InstanceSecurityGroup1:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH and HTTP access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref MyVPC

  Ec2Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: chandan  
      ImageId: ami-0287a05f0ef0e9d9a
      InstanceType: t2.micro
      Tags:
        - Key: Name
          Value: Jump_or_Bastion_Server
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update -y 
          apt install nginx -y
          service nginx start
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup1
          AssociatePublicIpAddress: true
          SubnetId: !Ref PublicSubnet
          DeviceIndex: 0
          PrivateIpAddress: '10.0.1.10'

  InstanceSecurityGroupsd:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: all port disable
      VpcId: !Ref MyVPC

  Ec2Instancedummy:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: chandan  
      ImageId: ami-0287a05f0ef0e9d9a
      InstanceType: t2.micro
      Tags:
        - Key: Name
          Value: dammy_server
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update -y 
          apt install nginx -y
          service nginx start
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroupsd
          AssociatePublicIpAddress: true
          SubnetId: !Ref PublicSubnet
          DeviceIndex: 0
          PrivateIpAddress: '10.0.1.20'


  InstanceSecurityGroup2:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access for specific IP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      VpcId: !Ref MyVPC

  Ec2Instance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: chandan  
      ImageId: ami-0287a05f0ef0e9d9a
      InstanceType: t2.micro
      Tags:
        - Key: Name
          Value: Private_Frontend_Server
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update -y 
          apt install apache2
          service apache2 start
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup2
          SubnetId: !Ref PrivateSubnet
          DeviceIndex: 0
          PrivateIpAddress: '10.0.2.21'

  InstanceSecurityGroup3:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access for specific IP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.1.10/32
      VpcId: !Ref MyVPC 


  Ec2Instance3:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: chandan  
      ImageId: ami-0287a05f0ef0e9d9a
      InstanceType: t2.micro
      Tags:
        - Key: Name
          Value: Private_Backend_Server
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update -y 
          apt install nginx -y
          service nginx start
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup3
          SubnetId: !Ref PrivateSubnet
          DeviceIndex: 0
          PrivateIpAddress: '10.0.2.20'

  InstanceSecurityGroup4:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access for specific IP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.1.10/32
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 10.0.2.20/32
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.1.10/32
      VpcId: !Ref MyVPC

  Ec2Instance4:
    Type: 'AWS::EC2::Instance'
    Properties:
      KeyName: chandan  
      ImageId: ami-0287a05f0ef0e9d9a
      InstanceType: t2.micro
      Tags:
        - Key: Name
          Value: Private_Mongo_Database_Server
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          # Update the package list
          sudo apt-get update -y

          # Install MySQL Server
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y mysql-server

          # Start MySQL Service
          sudo service mysql start

          # Optional: Secure MySQL Installation
          sudo mysql_secure_installation <<EOF

          y 
          Chandan@12345
          Chandan@12345
          y
          y
          y
          y
          EOF

          #  This scrpit will install and lanch the mysql server 

          sudo mysql -u root -p'Chandan@12345' <<MYSQL_SCRIPT
          CREATE DATABASE database; 
          CREATE USER 'user1'@'10.0.2.20' IDENTIFIED BY 'Chandan@12345';
          GRANT ALL PRIVILEGES ON your_database.* TO 'user1'@'10.0.2.20';
          FLUSH PRIVILEGES;
          EXIT;
          MYSQL_SCRIPT 

          # to enable the comminication we need add address in mysqld.cnf file 
          sudo sed -i 's/bind-address\s*=\s*127.0.0.1/bind-address = 10.0.2.20/' /etc/mysql/mysql.conf.d/mysqld.cnf 
          # to get changes reflect restart mysql
          sudo service mysql restart
      NetworkInterfaces:
        - GroupSet:
            - !Ref InstanceSecurityGroup4
          SubnetId: !Ref PrivateSubnet
          DeviceIndex: 0
          PrivateIpAddress: '10.0.2.30'

  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access for specific IP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/32
      VpcId: !Ref MyVPC 
      


  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/health"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: "200"
      Port: 80
      Protocol: "HTTP"
      TargetType: "instance"
      VpcId: !Ref MyVPC
      Targets:
        - Id: !Ref Ec2Instance2

  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
        - !Ref PrivateSubnet
        - !Ref PublicSubnet


      SecurityGroups: [!Ref LoadBalancerSecurityGroup]
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: MyLoadBalancer
      Scheme: internet-facing

  LoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: 'forward'
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

